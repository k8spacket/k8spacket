// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf_tc

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type tcTlsHandshakeEvent struct {
	Saddr             uint32
	Daddr             uint32
	Sport             uint16
	Dport             uint16
	TlsVersion        uint16
	TlsVersionsLength uint8
	_                 [1]byte
	TlsVersions       [8]uint16
	CiphersLength     uint16
	Ciphers           [100]uint16
	ServerNameLength  uint16
	ServerName        [100]uint8
	UsedTlsVersion    uint16
	UsedCipher        uint16
}

// loadTc returns the embedded CollectionSpec for tc.
func loadTc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load tc: %w", err)
	}

	return spec, err
}

// loadTcObjects loads tc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*tcObjects
//	*tcPrograms
//	*tcMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadTcObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadTc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// tcSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcSpecs struct {
	tcProgramSpecs
	tcMapSpecs
}

// tcSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcProgramSpecs struct {
	TcFilter *ebpf.ProgramSpec `ebpf:"tc_filter"`
}

// tcMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type tcMapSpecs struct {
	Events       *ebpf.MapSpec `ebpf:"events"`
	OutputEvents *ebpf.MapSpec `ebpf:"output_events"`
}

// tcObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadTcObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcObjects struct {
	tcPrograms
	tcMaps
}

func (o *tcObjects) Close() error {
	return _TcClose(
		&o.tcPrograms,
		&o.tcMaps,
	)
}

// tcMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadTcObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	OutputEvents *ebpf.Map `ebpf:"output_events"`
}

func (m *tcMaps) Close() error {
	return _TcClose(
		m.Events,
		m.OutputEvents,
	)
}

// tcPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadTcObjects or ebpf.CollectionSpec.LoadAndAssign.
type tcPrograms struct {
	TcFilter *ebpf.Program `ebpf:"tc_filter"`
}

func (p *tcPrograms) Close() error {
	return _TcClose(
		p.TcFilter,
	)
}

func _TcClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed tc_bpfeb.o
var _TcBytes []byte
