// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package ebpf_socketfilter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type socketfilterTlsHandshakeEvent struct {
	_                 structs.HostLayout
	Saddr             uint32
	Daddr             uint32
	Sport             uint16
	Dport             uint16
	TlsVersion        uint16
	TlsVersionsLength uint8
	_                 [1]byte
	TlsVersions       [8]uint16
	CiphersLength     uint16
	Ciphers           [100]uint16
	ServerNameLength  uint16
	ServerName        [100]uint8
	UsedTlsVersion    uint16
	UsedCipher        uint16
}

// loadSocketfilter returns the embedded CollectionSpec for socketfilter.
func loadSocketfilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SocketfilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load socketfilter: %w", err)
	}

	return spec, err
}

// loadSocketfilterObjects loads socketfilter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*socketfilterObjects
//	*socketfilterPrograms
//	*socketfilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSocketfilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSocketfilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// socketfilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketfilterSpecs struct {
	socketfilterProgramSpecs
	socketfilterMapSpecs
	socketfilterVariableSpecs
}

// socketfilterProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketfilterProgramSpecs struct {
	SocketHttpFilter *ebpf.ProgramSpec `ebpf:"socket__http_filter"`
}

// socketfilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketfilterMapSpecs struct {
	Events       *ebpf.MapSpec `ebpf:"events"`
	OutputEvents *ebpf.MapSpec `ebpf:"output_events"`
}

// socketfilterVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketfilterVariableSpecs struct {
}

// socketfilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSocketfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketfilterObjects struct {
	socketfilterPrograms
	socketfilterMaps
	socketfilterVariables
}

func (o *socketfilterObjects) Close() error {
	return _SocketfilterClose(
		&o.socketfilterPrograms,
		&o.socketfilterMaps,
	)
}

// socketfilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSocketfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketfilterMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	OutputEvents *ebpf.Map `ebpf:"output_events"`
}

func (m *socketfilterMaps) Close() error {
	return _SocketfilterClose(
		m.Events,
		m.OutputEvents,
	)
}

// socketfilterVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadSocketfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketfilterVariables struct {
}

// socketfilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSocketfilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketfilterPrograms struct {
	SocketHttpFilter *ebpf.Program `ebpf:"socket__http_filter"`
}

func (p *socketfilterPrograms) Close() error {
	return _SocketfilterClose(
		p.SocketHttpFilter,
	)
}

func _SocketfilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed socketfilter_bpfeb.o
var _SocketfilterBytes []byte
